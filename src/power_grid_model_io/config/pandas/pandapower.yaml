# SPDX-FileCopyrightText: 2022 Contributors to the Power Grid Model project <dynamic.grid.calculation@alliander.com>
#
# SPDX-License-Identifier: MPL-2.0
---
multipliers:
  .+_percent: 0.01
  .+_k(a|v|w): 1000.0
  .+_m(w|va|var): 1000000.0
grid:
  bus:
    node:
      id: index
      u_rated: vn_kv
  line:
    line:
      id: index
      from_node: from_bus
      from_status:
        power_grid_model_io.filters.all_true:
          - in_service
          #- power_grid_model_io.filters.value_or_default: #returns False = open, True = closed or simply true if there is no value
            #- switch!closed[element=index,bus=from_bus]
            #- switch!closed[element=index]
            #- true
      to_node: to_bus
      to_status:
        power_grid_model_io.filters.all_true:
          - in_service
          #- power_grid_model_io.filters.value_or_default:
            # - switch!closed[element=index,bus=to_bus]
            #- switch!closed[element=index]
            #- true
      r1:
        power_grid_model_io.filters.multiply:
          - r_ohm_per_km
          - length_km
      x1:
        power_grid_model_io.filters.multiply:
          - x_ohm_per_km
          - length_km
      c1:
        power_grid_model_io.filters.multiply:
          - c_nf_per_km
          - length_km
      tan1: 0.0
      i_n: max_i_ka
  load:
    sym_load:
      - id: [index, 0]
        type: 0 #const_power
        node: bus
        status: in_service
        p_specified:
          {power_grid_model_io.filters.multiply:
            [{power_grid_model_io.filters.subtract: [1.0, const_z_percent, const_i_percent]}, p_mw]}
        q_specified:
          {power_grid_model_io.filters.multiply:
             #[{power_grid_model_io.filters.subtract: [100.0, const_z_percent, const_i_percent]}, 0.01, q_mvar, 1000000]}
            [{power_grid_model_io.filters.subtract: [1.0, const_z_percent, const_i_percent]}, q_mvar]}
      - id: [index, 1]
        type: 1 #const_impedance
        node: bus
        status: in_service
        p_specified: {power_grid_model_io.filters.multiply: [const_z_percent, p_mw]}
        q_specified: {power_grid_model_io.filters.multiply: [const_z_percent, q_mvar]}
      - id: [index, 2]
        type: 2 #const_current
        node: bus
        status: in_service
        p_specified: {power_grid_model_io.filters.multiply: [const_i_percent, p_mw]}
        q_specified: {power_grid_model_io.filters.multiply: [const_i_percent, q_mvar]}
  ext_grid:
    source:
      id: [index, 0]
      node: bus
      status: in_service
      u_ref: vm_pu
  shunt:
    shunt:
      id: index
      node: bus
      status: in_service
      g1:
        power_grid_model_io.filters.pandapower.positive_sequence_conductance:
          - p_mw
          - bus!vn_kv[bus!index=shunt!bus]
      b1:
        power_grid_model_io.filters.pandapower.positive_sequence_conductance:
          - q_mvar
          - bus!vn_kv[bus!index=shunt!bus]
  sgen:
    sym_gen:
      id: index
      type: 0 #const_power
      node: bus
      status: in_service
      p_specified: p_mw
      q_specified: q_mvar
  trafo:
    transformer:
      id: index
      from_node: hv_bus
      from_status: in_service
      to_node: lv_bus
      to_status: in_service
      u1: vn_hv_kv
      u2: vn_lv_kv
      sn: sn_mva
      uk: vkr_percent
      pk: {power_grid_model_io.filters.multiply: [vkr_percent, sn_mva]}
      i0: i0_percent
      p0: pfe_kw
      winding_from:
        power_grid_model_io.filters.pandapower.get_transformer_winding_from:
          self.get_trafo_vector_group:
            - vector_group | std_type
      winding_to:
        power_grid_model_io.filters.pandapower.get_transformer_winding_to:
          self.get_trafo_vector_group:
            - vector_group | std_type
      clock:
        power_grid_model_io.filters.pandapower.get_transformer_clock:
          - shift_degree
      tap_pos: tap_pos
      tap_side: tap_side
      tap_min: tap_min
      tap_max: tap_max
      tap_nom: tap_neutral #default zero
      tap_size:
        power_grid_model_io.filters.pandapower.get_transformer_tap_size:
          - vn_hv_kv
          - vn_lv_kv
          - tap_step_percent
          - tap_side
  trafo3w:
    three_winding_transformer:
      id: index
      node_1: hv_bus
      node_2: mv_bus
      node_3: lv_bus
      status_1: in_service #not completely right
      status_2: in_service
      status_3: in_service
      u1: vn_hv_kv
      u2: vn_mv_kv
      u3: vn_lv_kv
      sn_1: sn_hv_mva
      sn_2: sn_mv_mva
      sn_3: sn_lv_mva
      uk_12: vk_hv_percent
      uk_13: vk_lv_percent
      uk_23: vk_mv_percent
      pk_12:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_pk:
          - vkr_hv_percent
          - sn_hv_mva
          - sn_mv_mva
      pk_13:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_pk:
          - vkr_lv_percent
          - sn_hv_mva
          - sn_lv_mva
      pk_23:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_pk:
          - vkr_mv_percent
          - sn_mv_mva
          - sn_lv_mva
      i0: i0_percent
      p0: pfe_kw
      winding_1:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_winding_1:
          self.get_trafo3w_vector_group:
            - vector_group | std_type
      winding_2:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_winding_2:
          self.get_trafo3w_vector_group:
            - vector_group | std_type
      winding_3:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_winding_3:
          self.get_trafo3w_vector_group:
            - vector_group | std_type
      clock_12:
        power_grid_model_io.filters.degrees_to_clock:
          - shift_mv_degree
      clock_13:
        power_grid_model_io.filters.degrees_to_clock:
          - shift_lv_degree
      tap_pos: tap_pos
      tap_side: tap_side
      tap_min: tap_min
      tap_max: tap_max
      tap_nom: tap_neutral
      tap_size:
        power_grid_model_io.filters.pandapower.get_3wdgtransformer_tap_size:
          - vn_hv_kv
          - vn_mv_kv
          - vn_lv_kv
          - tap_step_percent
          - tap_side
  switch:
    link:
      id: index
      from_node: bus
      to_node: element
      from_status:
        power_grid_model_io.filters.all_true:
          - power_grid_model_io.filters.pandapower.is_bus_switch:
            - et
          - power_grid_model_io.filters.pandapower.get_closed:
            - closed
      to_status:
        power_grid_model_io.filters.all_true:
          - power_grid_model_io.filters.pandapower.is_bus_switch:
            - et
          - power_grid_model_io.filters.pandapower.get_closed:
            - closed


substitutions:
  trafo.tap_side:
    "hv": 0
    "lv": 1
  trafo3w.tap_side:
    "hv": 0
    "mv": 1
    "lv": 2
