// SPDX-FileCopyrightText: Contributors to the Power Grid Model project <powergridmodel@lfenergy.org>
//
// SPDX-License-Identifier: MPL-2.0

#include "src\power_grid_model_io\converter_api\f_pgm_converter.h"

class PgmFConverter {
    public:
        PgmFConverter(){};

        char* f_file_buffer;       
        PGM_dataset_writable_* deserialized_data; // this type because it is generated by a deserializer type structure
        // input data
        // will be supplied by the user:
        // ConstDatasetPtr const unique_input_dataset{PGM_create_dataset_const(hl, "input", 0, 1)};
        // PGM_ConstDataset* input_dataset = unique_input_dataset.get();
        PGM_dataset_const_* pgm_input_data; 

        void parse_vnf_file(){
            // a deserializer type structure
            // vnf file is a raw string

            // this->deserialized_data = parsed_data
        };

        PGM_dataset_const_* convert_input(){
            convert_node_input();
            convert_line_input();
            convert_sources_input();
            convert_sym_loads_input();
            convert_shunts_input();
            convert_transformer_input();
            convert_sym_gens_input();
            convert_three_winding_transformers_input();
            convert_links_input();

            // then return the buffer
            // return pgm_input_data;
        };
        
    private:
        void convert_node_input(){
            // conversion process
            // conversion process
            // conversion process
            NodeInput node_input{.id = 0, .u_rated = 100.0};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "node", 1, 1, nullptr, &node_input);
        };
        void convert_line_input(){
            // conversion process
            // conversion process
            // conversion process
            LineInput line_input{.id = 1,
                          .from_node = 2,
                          .to_node = 3,
                          .from_status = 1,
                          .to_status = 1,
                          .r1 = 0.3,
                          .x1 = 0.4,
                          .c1 = 2e-4,
                          .tan1 = 0.1,
                          .r0 = 0.1,
                          .x0 = 0.2,
                          .c0 = 1e-4,
                          .tan0 = 0.2,
                          .i_n = 200.0};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "line", 1, 1, nullptr, &line_input);
        };

        void convert_sources_input(){
            // conversion process
            // conversion process
            // conversion process
            SourceInput source_input{.id = 1,
                                   .node = 2,
                                   .status = 1,
                                   .u_ref = u_input,
                                   .u_ref_angle = nan,
                                   .sk = sk,
                                   .rx_ratio = rx_ratio,
                                   .z01_ratio = z01_ratio};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "source", 1, 1, nullptr, &source_input);
        };

        void convert_sym_loads_input(){
            // conversion process
            // conversion process
            // conversion process
            SymLoadGenInput load_input{.id = 2, .node = 0, .status = 1, .type = LoadGenType::const_i, .p_specified = 0.0, .q_specified = 500.0};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "sym_load", 1, 1, nullptr, &load_input);
        };


        void convert_shunts_input(){
            // conversion process
            // conversion process
            // conversion process
            ShuntInput shunts_input{.id = 3, .node = 0, .status = 1, .g1 = 1.0, .b1 = 1.0, .g0 = 1.0, .b0 = 1.0};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "shunt", 1, 1, nullptr, &shunts_input);
        };
            
        void convert_transformer_input(){
            // conversion process
            // conversion process
            // conversion process
            TransformerInput transformer_input{.id = 1,
                           .from_node = 2,
                           .to_node = 3,
                           .from_status = 1,
                           .to_status = 1,
                           .u1 = 155e3,
                           .u2 = 10.0e3,
                           .sn = 30e6,
                           .uk = 0.203,
                           .pk = 100e3,
                           .i0 = 0.0,
                           .p0 = 0.0,
                           .winding_from = WindingType::wye_n,
                           .winding_to = WindingType::wye_n,
                           .clock = 12,
                           .tap_side = BranchSide::from,
                           .tap_pos = 0,
                           .tap_min = -11,
                           .tap_max = 9,
                           .tap_nom = 0,
                           .tap_size = 2.5e3,
                           .uk_min = nan,
                           .uk_max = nan,
                           .pk_min = nan,
                           .pk_max = nan,
                           .r_grounding_from = nan,
                           .x_grounding_from = nan,
                           .r_grounding_to = nan,
                           .x_grounding_to = nan};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "transformer", 1, 1, nullptr, &transformer_input);
        };
            
        void convert_sym_gens_input(){
            // conversion process
            // conversion process
            // conversion process
            SymLoadGenInput gen_input{.id = 2, .node = 0, .status = 1, .type = LoadGenType::const_i, .p_specified = 0.0, .q_specified = 500.0};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "sym_gen", 1, 1, nullptr, &gen_input);
        };
            
        void convert_three_winding_transformers_input(){
            // conversion process
            // conversion process
            // conversion process
            ThreeWindingTransformerInput three_winding_transformer_input{.id = 1,
                                       .node_1 = 2,
                                       .node_2 = 3,
                                       .node_3 = 4,
                                       .status_1 = 1,
                                       .status_2 = 1,
                                       .status_3 = 1,
                                       .u1 = 138e3,
                                       .u2 = 69e3,
                                       .u3 = 13.8e3,
                                       .sn_1 = 60e6,
                                       .sn_2 = 50e6,
                                       .sn_3 = 10e6,
                                       .uk_12 = 0.09,
                                       .uk_13 = 0.06,
                                       .uk_23 = 0.03,
                                       .pk_12 = 200e3,
                                       .pk_13 = 150e3,
                                       .pk_23 = 100e3,
                                       .i0 = 0.1,
                                       .p0 = 50e3,
                                       .winding_1 = WindingType::wye_n,
                                       .winding_2 = WindingType::delta,
                                       .winding_3 = WindingType::delta,
                                       .clock_12 = 1,
                                       .clock_13 = 1,
                                       .tap_side = Branch3Side::side_1,
                                       .tap_pos = 2,
                                       .tap_min = -8,
                                       .tap_max = 10,
                                       .tap_nom = 0,
                                       .tap_size = 1380,
                                       .uk_12_min = nan,
                                       .uk_12_max = nan,
                                       .uk_13_min = nan,
                                       .uk_13_max = nan,
                                       .uk_23_min = nan,
                                       .uk_23_max = nan,
                                       .pk_12_min = nan,
                                       .pk_12_max = nan,
                                       .pk_13_min = nan,
                                       .pk_13_max = nan,
                                       .pk_23_min = nan,
                                       .pk_23_max = nan,
                                       .r_grounding_1 = 1.0,
                                       .x_grounding_1 = 4.0,
                                       .r_grounding_2 = nan,
                                       .x_grounding_2 = nan,
                                       .r_grounding_3 = nan,
                                       .x_grounding_3 = nan};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "three_winding_transformer", 1, 1, nullptr, &three_winding_transformer_input);
        };
            
        void convert_links_input(){
            // conversion process
            // conversion process
            // conversion process
            LinkInput link_input{.id = 2, from.node = 0, to.node = 0, .from_status = 1, .to_status = 1};

            PGM_dataset_const_add_buffer(hl, pgm_input_data, "link", 1, 1, nullptr, &link_input);
        };
            
};