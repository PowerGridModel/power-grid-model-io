// SPDX-FileCopyrightText: Contributors to the Power Grid Model project <powergridmodel@lfenergy.org>
//
// SPDX-License-Identifier: MPL-2.0

#define PGM_DLL_EXPORTS

#include <iostream>

#include "../include/c_converter_api.h"
#include "../include/vnf_pgm_converter.h"

#include "power_grid_model_c.h"

extern "C" {
    PGM_VNF_CONVERTER_HELPER_DLL_EXPORT void parse_vnf_file();
    PGM_VNF_CONVERTER_HELPER_DLL_EXPORT PGM_dataset_const_* PgmVnfConverter::convert_input();
    PGM_VNF_CONVERTER_HELPER_DLL_EXPORT void set_core_path(char const* const path);
}

static std::string core_path{PGM_VNF_CONVERTER_DLL_PREFIX + "shared_library_core"s + PGM_VNF_CONVERTER_DLL_SUFFIX};

// This is for the dynamic loading
typedef int(PGM_VNF_CONVERTER_CALL* f_funci)();
PGM_VNF_CONVERTER_HANDLE load_and_printsx(std::string const& library_path, std::string const& function_name) {
    // Load the library
    PGM_VNF_CONVERTER_HANDLE handle = load_library(library_path.c_str());

    if (handle == nullptr) {
        std::cout << library_path << " not loaded" << std::endl;
        return;
    }
    std::cout << library_path << " loaded in library using loading" << std::endl;
    return handle;
};

// Wrapper functions
void parse_vnf_file_wrapper(PgmVnfConverter* obj) {
    return obj->parse_vnf_file();
};

PGM_dataset_const_* parse_vnf_file_wrapper(PgmVnfConverter* obj) {
    return obj->convert_input();
};

class PgmVnfConverter {
    public:
        char* f_file_buffer;       
        PGM_dataset_writable_* deserialized_data; // this type because it is generated by a deserializer type structure
        // input data
        // will be supplied by the  user:
        // ConstDatasetPtr const unique_input_dataset{PGM_create_dataset_const(hl, "input", 0, 1)};
        // PGM_ConstDataset* input_dataset = unique_input_dataset.get();

        // PGM_dataset_const_* pgm_input_data; testing purposes only

        void parse_vnf_file(){
            // a deserializer type structure
            // vnf file is a raw string

            // this->deserialized_data = parsed_data
        };

        PGM_dataset_const_* convert_input(){
            convert_node_input();
            convert_line_input();
            convert_sources_input();
            convert_sym_loads_input();
            convert_shunts_input();
            convert_transformer_input();
            convert_sym_gens_input();
            convert_links_input();

            // then return the buffer
            // return pgm_input_data;
        };
        
    private:
        void convert_node_input(){
            // instead of add buffer(will be done on vision side)
            // we have to do get_buffer(doesn't exist yet, we have to create it, create getters on the pgm c api)
        };

        void convert_line_input(){};

        void convert_sources_input(){};

        void convert_sym_loads_input(){};

        void convert_shunts_input(){};
            
        void convert_transformer_input(){};
            
        void convert_sym_gens_input(){};
            
        void convert_links_input(){};
            
};

void set_core_path(char const* const path) {
    core_path = path;
    std::cout << "Core path set to: '" << core_path << "'" << std::endl;
};